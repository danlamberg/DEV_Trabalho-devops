**CONTROLE DE VERSAO GIT**

O que é o Controle de Versão e quais são suas Vantagens?
    O Git é um Software de controle de versão que consegue fazer um gerenciamento de versões e das mudanças em um documento.
    Esse documento pode ser qualquer tipo de arquivo, como por exemplo um docx, txt, xls, xml, html, css, entre outros.
    O uso do controle de versão é muito comum em empresas de desenvolvimento de software para fazer o gerenciamento de versões de software.
    Esse controle de versões é útil tanto em pequenos projetos como em grandes projetos e já está em uso no mercado a mais de 20 anos.
    Dentre as funcionalidades do controle de versões, podemos citar:
- Histórico: no desenvolvimento de um projeto conseguimos ver as alterações e versões em uma linha do tempo.
    Podemos alternar entre as versões, indo da mais antiga para a mais recente, para ver o que mudou e quando mudou e para comparar as versões.
    Essa funcionalidade é muito útil pois se uma mudança no desenvolvimento não der certo e gerar erros no software, podemos retornar para a
    versão anterior e analisar onde o erro ocorreu. Com o backup das versões, também podemos ter um “plano B”, caso a versão atual não dê certo.
- Trabalho em equipe: outra funcionalidade importante no controle de versões é que é possível desenvolver o projeto em uma equipe com várias
    pessoas, trabalhando em paralelo ao mesmo tempo em ambientes diferentes.
- Ramificação: com essa funcionalidade é possível criar várias versões do projeto a partir de um mesmo ponto. Com isso é possível desenvolver
    duas funcionalidades do software, por duas pessoas diferentes ao mesmo tempo.
- Rastreabilidade: com o histórico das alterações, nós conseguimos ver as alterações, os autores que fizeram as alterações e a data de cada uma
    dessas alterações. Conseguimos ter os detalhes de cada alteração feita. É extremamente importante em desenvolvimento de software identificar o
    autor responsável pela mudança.

Tipos de Controle de Versão
    Existem dois tipos de controle de versão: o Centralizado e o Distribuído.
- Centralizado: o sistema de controle de versão centralizado é o sistema que possui um servidor que contém todo o histórico.
    Se chama centralizado porque todas as versões estão guardadas em um lugar só: no Servidor. Se uma pessoa for trabalhar em um projeto nesse
    sistema, ela precisa ter permissão para acessar o servidor. Essa pessoa não tem, por exemplo, o histórico das versões em sua máquina. 
    Para consultar o histórico é necessário acessar o servidor. Para baixar uma versão do projeto, a pessoa teria que fazer uma conexão no
    servidor e fazer o download dessa versão.
    Esse sistema foi padrão por muitos anos. O principal software de controle de versão centralizado foi o Subversion (SVN), que surgiu no 
    ano 2000. Em algumas situações, esse sistema pode ser o mais recomendado para ser usado, se encaixando melhor. Outros exemplos de sistema
    de controle de versão centralizado é o Team Foundation Server (TFS) e o Perforce.
- Distribuído: esse sistema de controle de versão fica distribuído nas máquinas que estão cooperando no repositório, além do servidor.
    Todas as pessoas que estão trabalhando em um projeto distribuído têm acesso ao histórico de versões, pois todo o histórico do projeto 
    é levado para a máquina local. Se quisermos criar uma branch (ramificação), acessar o histórico ou criar uma versão, nós fazemos na máquina
    local, sem precisar acessar o servidor.
    Como vantagens desse sistema temos maior rapidez para fazer as alterações, pois essas alterações são feitas localmente.
    Outra grande vantagem é a réplica do repositório pois, caso o servidor queime, cada pessoa trabalhando no projeto terá uma versão em sua
    máquina local. Como principal exemplo de software de controle de versão distribuído temos o Git, que é o tema desse curso.

Características do Git
    Dentre as principais características do Git, podemos citar:
    Operações locais, como a navegação pelo histórico, a criação de ramificações do projeto e a troca de versões sem 
    precisar comunicar o servidor;
    Somente adição de conteúdo, pois mesmo quando um arquivo é removido, no repositório ocorre a adição de uma remoção 
    do arquivo. Ou seja, quando apagamos um arquivo do repositório ele não vai sumir do projeto. Esse arquivo apenas não 
    vai estar nessa versão do projeto, mas vai estar na versão anterior.
    Integridade, que tem a ver com a característica anterior. Uma vez que o arquivo é adicionado, todo seu histórico é 
    mantido.
    Autonomia, onde vários colaboradores conseguem realizar alterações sem a dependência de arquivos.

Comandos Básicos do Git
    - git init: inicializa o repositório do Git dentro da pasta do projeto.
    - git status:. informa o estado dos arquivos e diretórios dentro do repositório Git.
    - git add .: esse comando prepara as alterações que foram feitas para receber o commit.
    - git commit -m “mensagem”: esse comando faz o commit das alterações, salvando essas alterações no repositório do Git.
    A mensagem entre aspas é a identificação do commit.
    - git diff: mostra a diferença dos arquivos entre as duas últimas versões.
    - git log: apresenta todo o histórico de commits do repositório.
    - git checkout: possibilita alternar entre as versões e branchs.
    - git clone: clona repositórios existentes no servidor remoto para nossa máquina local
    - git remote add: faz o link entre o repositório local e o repositório remoto.
    - git pull: baixa a versão mais atual do projeto no repositório remoto.
    - git push: carrega o código e os commits da máquina local e envia para o repositório remoto.
    - git branch: cria uma branch ou lista as branchs existentes.
    - git merge: junta as alterações da branch criada para a branch raiz.

